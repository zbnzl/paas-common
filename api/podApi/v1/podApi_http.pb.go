// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.3
// source: api/podApi/v1/podApi.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPodApiAddPod = "/api.podApi.v1.PodApi/AddPod"
const OperationPodApiDeletePodById = "/api.podApi.v1.PodApi/DeletePodById"
const OperationPodApiFindPodById = "/api.podApi.v1.PodApi/FindPodById"
const OperationPodApiUpdatePod = "/api.podApi.v1.PodApi/UpdatePod"

type PodApiHTTPServer interface {
	AddPod(context.Context, *Request) (*Response, error)
	DeletePodById(context.Context, *Request) (*Response, error)
	FindPodById(context.Context, *Request) (*Response, error)
	UpdatePod(context.Context, *Request) (*Response, error)
}

func RegisterPodApiHTTPServer(s *http.Server, srv PodApiHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/pod", _PodApi_FindPodById0_HTTP_Handler(srv))
	r.POST("/v1/pod", _PodApi_AddPod0_HTTP_Handler(srv))
	r.DELETE("/v1/pod", _PodApi_DeletePodById0_HTTP_Handler(srv))
	r.PUT("/v1/pod", _PodApi_UpdatePod0_HTTP_Handler(srv))
}

func _PodApi_FindPodById0_HTTP_Handler(srv PodApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Request
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodApiFindPodById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FindPodById(ctx, req.(*Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

func _PodApi_AddPod0_HTTP_Handler(srv PodApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodApiAddPod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddPod(ctx, req.(*Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

func _PodApi_DeletePodById0_HTTP_Handler(srv PodApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Request
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodApiDeletePodById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeletePodById(ctx, req.(*Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

func _PodApi_UpdatePod0_HTTP_Handler(srv PodApiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPodApiUpdatePod)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdatePod(ctx, req.(*Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Response)
		return ctx.Result(200, reply)
	}
}

type PodApiHTTPClient interface {
	AddPod(ctx context.Context, req *Request, opts ...http.CallOption) (rsp *Response, err error)
	DeletePodById(ctx context.Context, req *Request, opts ...http.CallOption) (rsp *Response, err error)
	FindPodById(ctx context.Context, req *Request, opts ...http.CallOption) (rsp *Response, err error)
	UpdatePod(ctx context.Context, req *Request, opts ...http.CallOption) (rsp *Response, err error)
}

type PodApiHTTPClientImpl struct {
	cc *http.Client
}

func NewPodApiHTTPClient(client *http.Client) PodApiHTTPClient {
	return &PodApiHTTPClientImpl{client}
}

func (c *PodApiHTTPClientImpl) AddPod(ctx context.Context, in *Request, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/v1/pod"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPodApiAddPod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PodApiHTTPClientImpl) DeletePodById(ctx context.Context, in *Request, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/v1/pod"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodApiDeletePodById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PodApiHTTPClientImpl) FindPodById(ctx context.Context, in *Request, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/v1/pod"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPodApiFindPodById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PodApiHTTPClientImpl) UpdatePod(ctx context.Context, in *Request, opts ...http.CallOption) (*Response, error) {
	var out Response
	pattern := "/v1/pod"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPodApiUpdatePod))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
